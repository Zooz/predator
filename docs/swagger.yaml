openapi: 3.0.0
info:
  version: 1.0.0
  title: Predator
  x-logo:
    url: logo.png
    backgroundColor: white
  description: |
    # Overview

    Predator is an open-source performance framework. It manages the entire
    lifecycle of load testing a server, from creating a test file, running
    scheduled and on-demand tests, and finally viewing the test results.
    Developers who want to load their system end-to-end or test a specific
    service will benefit from this framework. Bootstrapped with a user-friendly
    UI alongside a simple REST API, Predator simplifies the performance testing
    regime.

    For an introduction to Predator and its concepts, see the <a href="https://www.zooz.com" target="_blank">Predator Documentation</a>.

tags:
  - name: DSL Definitions
    description: |
      Predator's Domain Specific Language (DSL) allows you to generate request templates, which you can then reuse in the same test and in other tests under the same DSL type, reducing replication.

x-tagGroups:
  - name: Reference
    tags:
      - DSL Definitions

paths:
  '/v1/dsl/{dsl_group}/definitions':
    post:
      tags:
        - DSL Definitions
      summary: Create a new DSL Definition
      description: Create a new DSL definition to generate a request template.
      parameters:
        - in: path
          name: dsl_group
          description: |
            The group (category) in which the DSL definition will be created. Specify a group name of your choice. We recommend you place related DSL definitions in the same group.
          required: true
          schema:
            type: string
          example: petstore
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definition'
        description: The definition to create
        required: true
    get:
      tags:
        - dsl
      description: Get definitions.
      parameters:
        - in: path
          name: dsl_name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/dsl/{dsl_name}/definitions/{definition_name}':
    get:
      tags:
        - dsl
      description: Get definition.
      parameters:
        - in: path
          name: dsl_name
          required: true
          schema:
            type: string
        - in: path
          name: definition_name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      tags:
        - dsl
      description: update specific definition.
      parameters:
        - in: path
          name: dsl_name
          required: true
          schema:
            type: string
        - in: path
          name: definition_name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_definition'
        description: The dsl to update
        required: true
    delete:
      tags:
        - dsl
      description: delete a specific definition.
      parameters:
        - in: path
          name: dsl_name
          required: true
          schema:
            type: string
        - in: path
          name: definition_name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/tests:
    get:
      tags:
        - tests
      description: Get list of all test and there descriptions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    post:
      tags:
        - tests
      description: Create new test
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to add
        required: true
  '/v1/tests/{test_id}':
    get:
      tags:
        - tests
      description: Get specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      tags:
        - tests
      description: update specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to update
        required: true
    delete:
      tags:
        - tests
      description: delete a specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/revisions':
    get:
      tags:
        - tests
      description: Get list of all test revision of a specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/jobs:
    get:
      tags:
        - jobs
      description: Get list of all jobs.
      parameters:
        - in: query
          name: one_time
          description: Should return the one time tests (no cron expression)
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    post:
      tags:
        - jobs
      description: Create a new job that will trigger test run
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_job_response'
        description: The job to add
        required: true
  '/v1/jobs/{job_id}':
    get:
      tags:
        - jobs
      description: Get specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      tags:
        - jobs
      description: update specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job_update'
        description: The job to add
        required: true
    delete:
      tags:
        - jobs
      description: delete a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/jobs/{job_id}/runs/{run_id}/stop':
    post:
      tags:
        - jobs
      description: stop a specific run of specific job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports':
    post:
      tags:
        - tests
      description: Create new report for specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post_report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_report'
        description: report data
        required: true
    get:
      tags:
        - tests
      description: Get all summary reports for specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/tests/last_reports:
    get:
      tags:
        - tests
      description: Get all last reports limited by a query param
      parameters:
        - in: query
          name: limit
          description: How many last reports show
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}/stats':
    post:
      tags:
        - tests
      description: Insert a new stats object for a specific report
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stats'
        description: stats data
        required: true
  '/v1/tests/{test_id}/reports/{report_id}':
    get:
      tags:
        - tests
      description: Get specific report for specific test
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}/html':
    get:
      tags:
        - tests
      description: Get list of the history of this specific job id
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
components:
  schemas:
    definition:
      type: object
      required:
        - name
        - request
      properties:
        name:
          description: The name of the DSL definition.
          type: string
          example: create-pet
        request:
          description: The request template that the DSL definition will generate.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
          example: {
                    	"name": "create-pet",
                    	"request": {
                    		"post": {
                    			"url": "http://127.0.0.1:3000/pets",
                    			"headers": {
                                				"Content-Type": "application/json"
                                		  },
                    			"json": {
                    				"name": "mickey",
                    				"species": "dog"
                    			},
                    			"capture": [
                    				{
                    					"json": "$.id",
                    					"as": "petId"
                    				}
                    			]
                    		}
                    	}
                    }
    update_definition:
      required:
        - request
      properties:
        request:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
    definitions_response:
      type: array
      items:
        $ref: '#/components/schemas/definition'
    test:
      type: object
      discriminator:
        propertyName: type
      required:
        - name
        - description
        - type
      properties:
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: A description of the test.
        type:
          type: string
          enum:
            - dsl
            - custom
    dsl:
      description: A test that is made of scenarios base on domain specific language
      allOf:
        - $ref: '#/components/schemas/test'
        - type: object
          required:
            - scenarios
          properties:
            scenarios:
              type: array
              items:
                $ref: '#/components/schemas/scenario'
    artillery_request_schema:
      description: |
        The request schema used in test scenarios. The property name must be one of the following HTTP methods: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`.

        **Beware**: Specifying an invalid property name will return an error.
      type: object
      properties:
        capture:
          description: |
            Allows you to extract (capture) data from the request response and store it in a variable for reuse in another request.
            Must include one or more objects with a `json` attribute specifying the data to extract (using JSONPath syntax), as well as an `as` attribute specifying the variable name in which to store the extracted data.
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        url:
          description: The endpoint against which the request will be executed.
          type: string
        headers:
          description: The headers to pass in the request.
          additionalProperties:
            type: string
        json:
          description: The JSON body to use in the request.
          type: object
    key_value_string_object:
      type: object
      additionalProperties:
        type: string
    custom:
      description: A test that is made of artillery json
      allOf:
        - $ref: '#/components/schemas/test'
      required:
        - artillery_test
      properties:
        artillery_test:
          type: object
    test_id:
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The id of the test.
    create_test_response:
      allOf:
        - $ref: '#/components/schemas/test_id'
      required:
        - revision_id
      properties:
        revision_id:
          type: string
          format: uuid
          description: The id of the revision.
    tests_response:
      allOf:
        - $ref: '#/components/schemas/create_test_response'
        - $ref: '#/components/schemas/test_id'
      required:
        - name
        - description
        - type
        - raw_data
        - artillery_test
        - updated_at
      properties:
        updated_at:
          type: string
          format: date_time
          description: The time the test was created/updated
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: The description of the test
        type:
          type: string
          enum:
            - dsl
            - custom
          description: >-
            the type of the test, custom - an artillery json created by the
            client, dsl - a test with saved request definitions api.
        raw_data:
          type: array
          items:
            $ref: '#/components/schemas/scenario'
        artillery_test:
          type: object
          description: >-
            The artillery json that represents the test created from the raw
            data.
    error_response:
      required:
        - message
      properties:
        message:
          type: string
    scenario:
      required:
        - scenario_name
        - steps
      properties:
        scenario_name:
          type: string
          description: The name of the scenario
        steps:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - action
            properties:
              action:
                type: string
              properties:
                type: object
                description: >-
                  Any additional properties in the body request that should be
                  changed.
              wait:
                type: integer
                description: To wait 'x' seconds before starting the request.
            description: An object that represent an action.
          description: An array of the steps in the scenario
        weight:
          type: number
          description: >-
            The weight (in percentage) of the scenario in the test. If not
            specified, will be calculated.
    job:
      required:
        - test_id
        - arrival_rate
        - duration
      properties:
        variables:
          type: object
          description: >-
            Variables that the artillery uses and can be defined by the user.
            Supported variables: 1) appId - if specifed merchantId must be a
            variable too.
          example:
            appId: App-name
            merchantId: cd44fc7a-7719-4383-9981-427ff1210553
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        run_immediately:
          type: boolean
          description: >-
            Should the test be triggered immediately, regarding the cron
            expression
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_update:
      properties:
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_response:
      allOf:
        - $ref: '#/components/schemas/job'
        - properties:
            id:
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: Uuid that identifies the job
    create_job_response:
      allOf:
        - $ref: '#/components/schemas/job_response'
        - properties:
            run_id:
              type: string
              description: 'If the job is ran immediately, will show the run id.'
    post_report:
      required:
        - report_id
        - job_id
        - revision_id
        - test_type
        - test_name
        - test_description
        - start_time
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_name:
          type: string
          description: The test name
        test_description:
          type: string
          description: The test description
        start_time:
          type: string
          description: When the test started
        last_stats:
          type: string
          description: How many of the requests ended in error (not 2xx)
        notes:
          type: string
          description: notes about the test
    post_report_response:
      required:
        - report_id
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
    stats:
      required:
        - stats_time
        - phase_status
        - data
      properties:
        stats_time:
          type: string
          description: The time the stats were taken of the test
        phase_status:
          type: string
          description: The phase status of the test
        phase_index:
          type: string
          description: The phase number the test is running
        data:
          type: string
          description: The stats data
        error:
          type: object
          description: Error thrown while running test
    report_response:
      required:
        - test_id
        - revision_id
        - report_id
        - job_id
        - test_type
        - status
        - start_time
        - end_time
        - duration_seconds
        - avg_response_time_ms
        - arrival_rate
      properties:
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        report_id:
          type: string
          description: The id of the report/same as run_id
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_type:
          type: string
          description: 'The type of the test, can be paymentsos or custom'
        status:
          type: string
          description: The status of the running test
        start_time:
          type: string
          format: date
          description: When the test started
        end_time:
          type: string
          format: date
          description: when the tests finished
        duration_seconds:
          type: number
          description: The length of test in seconds
        avg_response_time_ms:
          type: number
          description: The average response time of the requests
        arrival_rate:
          type: number
          description: Arrival rate set for the test (how many requests send per second)
        last_stats:
          type: string
          description: How many of the requests ended in error (not 2xx)
        notes:
          type: string
          description: notes about the test
