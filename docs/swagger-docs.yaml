openapi: 3.0.0
info:
  version: 1.0.0
  title: Predator
  x-logo:
    url: logo.png
    backgroundColor: white
  description: |
    # Overview

    Predator is an open-source performance framework. It manages the entire
    lifecycle of load testing a server, from creating a test file, running
    scheduled and on-demand tests, and finally viewing the test results.
    Developers who want to load their system end-to-end or test a specific
    service will benefit from this framework. Bootstrapped with a user-friendly
    UI alongside a simple REST API, Predator simplifies the performance testing
    regime.

    For an introduction to Predator and its concepts, see the <a href="https://www.zooz.com" target="_blank">Predator Documentation</a>.

tags:
  - name: DSL Definitions
    description: |
      Predator's Domain Specific Language (DSL) allows you to generate request templates, which you can then reuse in the same test and in other tests, reducing replication.
  - name: Tests
    description: |
      Tests include end-to-end scenarios that are executed at pre-configured intervals to provide in-depth performance metrics of your API.
  - name: Jobs
    description: |
      Predator executes tests through so-called **jobs**. Depending on your configuration, the job will either execute immediately or at scheduled intervals.
  - name: Reports
    description: |
      Reports give you insight into the performance of your API. Predator generates a report for each test that is executed.

x-tagGroups:
  - name: Reference
    tags:
      - DSL Definitions
      - Tests
      - Jobs
      - Reports

paths:
  # DSL Definitions
  '/v1/dsl/{dsl_group}/definitions':
    parameters:
      - $ref: '#/components/parameters/dsl_group'
    post:
      operationId: create-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Create a DSL Definition
      description: Create a new DSL definition to generate a request template.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definition'
        description: The definition to create
        required: true
    get:
      operationId: retrieve-all-dsl-definitions
      tags:
        - DSL Definitions
      summary: Retrieve all DSL Definitions
      description: Retrieve all DSL definitions for the specified DSL group name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/dsl/{dsl_group}/definitions/{definition_name}':
    parameters:
      - $ref: '#/components/parameters/dsl_group'
      - $ref: '#/components/parameters/definition_name'
    get:
      operationId: retrieve-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Retrieve a DSL Definition
      description: Retrieve a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Update a DSL Definition
      description: Update a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_definition'
        description: The DSL definition to update
        required: true
    delete:
      operationId: Delete-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Delete a DSL Definition
      description: Delete a specific DSL definition.
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Tests
  /v1/tests:
    post:
      operationId: create-a-test
      tags:
        - Tests
      summary: Create a Test
      description: Create a new test.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to add
        required: true
    get:
      operationId: retrieve-all-tests
      tags:
        - Tests
      summary: Retrieve all Tests
      description: Retrieve all available tests.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}':
    get:
      operationId: retrieve-a-test
      tags:
        - Tests
      summary: Retrieve a Test
      description: Retrieve a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-test
      tags:
        - Tests
      summary: Update a Test
      description: Update a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to update
        required: true
    delete:
      operationId: delete-a-test
      tags:
        - Tests
      summary: Delete a Test
      description: Delete a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/revisions':
    operationId: retrieve-all-test-revisions
    get:
      tags:
        - Tests
      summary: Retrieve Test Revisions
      description: Retrieve the revisions of the specified test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Jobs
  /v1/jobs:
    get:
      operationId: retrieve-all-jobs
      tags:
        - Jobs
      summary: Retrieve all Jobs
      description: Retrieve the details of all available jobs.
      parameters:
        - in: query
          name: one_time
          description: Should return the one time tests (no cron expression)
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    post:
      operationId: create-a-job
      tags:
        - Jobs
      summary: Create a Job
      description: Create a new job that will trigger a test run.
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_job_response'
        description: The job to add
        required: true
  '/v1/jobs/{job_id}':
    get:
      operationId: retrieve-a-job
      tags:
        - Jobs
      summary: Retrieve a Job
      description: Retrieve a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      tags:
        - jobs
      description: update specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job_update'
        description: The job to add
        required: true
    delete:
      operationId: delete-a-job
      tags:
        - Jobs
      summary: Delete a Job
      description: Delete a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/jobs/{job_id}/runs/{run_id}/stop':
    post:
      operationId: terminate-a-job
      tags:
        - Jobs
      summary: Terminate a Job
      description: Terminate the execution of a running job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Reports
  '/v1/tests/{test_id}/reports':
    get:
      operationId: retrieve-all-reports
      tags:
        - Reports
      summary: Retrieve all Reports
      description: Retrieve all reports for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/tests/last_reports:
    get:
      operationId: retrieve-recent-reports
      tags:
        - Reports
      summary: Retrieve Recent Reports
      description: Retrieve the most recent reports
      parameters:
        - in: query
          name: limit
          description: The number of most recent reports to retrieve.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}':
    get:
      operationId: retrieve-a-report
      tags:
        - Reports
      summary: Retrieve a Report
      description: Retrieve a specific report for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          description: The test id.
          schema:
            type: string
          example: 81a27853-0db5-4e57-ad63-4b637528398a
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
components:
  parameters:
    dsl_group:
      name: dsl_group
      in: path
      required: true
      description: The group (category) in which the DSL definition will be created. Specify a group name of your choice. We recommend you place related DSL definitions in the same group.
      schema:
        type: string
      example: petstore
    definition_name:
      name: definition_name
      in: path
      required: true
      description: The name of the DSL definition.
      schema:
        type: string
      example: create-pet
  schemas:
    definition:
      type: object
      required:
        - name
        - request
      properties:
        name:
          description: The name of the DSL definition.
          type: string
          example: create-pet
        request:
          description: The request template that the DSL definition will generate.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
          example: {
                    	"name": "create-pet",
                    	"request": {
                    		"post": {
                    			"url": "http://127.0.0.1:3000/pets",
                    			"headers": {
                                				"Content-Type": "application/json"
                                		  },
                    			"json": {
                    				"name": "mickey",
                    				"species": "dog"
                    			},
                    			"capture": [
                    				{
                    					"json": "$.id",
                    					"as": "petId"
                    				}
                    			]
                    		}
                    	}
                    }
    update_definition:
      required:
        - request
      properties:
        request:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
    definitions_response:
      type: array
      items:
        $ref: '#/components/schemas/definition'
    test:
      type: object
      discriminator:
        propertyName: type
      required:
        - name
        - description
        - type
      properties:
        name:
          type: string
          description: The name of the test.
          example: Order from Pet Store
        description:
          type: string
          description: A description of the test.
          example: Performance test for placing orders from the pet store.
        type:
           $ref: '#/components/schemas/test_type'
    test_type:
      type: string
      description: |
        The type of test. Can be one of the following:
          * `dsl`: Tests of this type reuse request templates based on previously created DSL definitons.
          * `basic`: Tests of this type cannot reuse request templates (DSL definition). All request specifications must be directly included in the test itself.
            This test type is identical to the type of tests you can create through the Predator UI.
      enum:
        - dsl
        - custom
      example: dsl
    dsl:
      description: A test that is made of scenarios base on domain specific language
      allOf:
        - $ref: '#/components/schemas/test'
        - type: object
          required:
            - scenarios
          properties:
            scenarios:
              description: A scenario is a sequence of HTTP requests aimed to test the performance of specific functionality.
              type: array
              items:
                $ref: '#/components/schemas/scenario'
    artillery_request_schema:
      description: |
        The request schema used in test scenarios. The property name must be one of the following HTTP methods: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`.

        **Beware**: Specifying an invalid property name will return an error.
      type: object
      properties:
        capture:
          description: |
            Allows you to extract (capture) data from the request response and store it in a variable for reuse in another request.
            Must include one or more objects with a `json` attribute specifying the data to extract (using JSONPath syntax), as well as an `as` attribute specifying the variable name in which to store the extracted data.
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        url:
          description: The endpoint against which the request will be executed.
          type: string
        headers:
          description: The headers to pass in the request.
          additionalProperties:
            type: string
        json:
          description: The JSON body to use in the request.
          type: object
    key_value_string_object:
      type: object
      additionalProperties:
        type: string
    custom:
      description: A test that is made of artillery json
      allOf:
        - $ref: '#/components/schemas/test'
      required:
        - artillery_test
      properties:
        artillery_test:
          type: object
    test_id:
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The id of the test.
    create_test_response:
      allOf:
        - $ref: '#/components/schemas/test_id'
      required:
        - revision_id
      properties:
        revision_id:
          type: string
          format: uuid
          description: |
            The test's revision ID.

            When a test is created, it is assigned a revision ID. If you update a test, then it's revision ID changes as well. This allows Predator to always relate an existing report to the test it was originally based on.
    tests_response:
      allOf:
        - $ref: '#/components/schemas/create_test_response'
#        - $ref: '#/components/schemas/test_id'
      required:
        - name
        - description
        - type
        - raw_data
        - artillery_test
        - updated_at
      properties:
        updated_at:
          type: string
          format: date_time
          description: 	The date and time that the test was created.
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: The description of the test.
        type:
          $ref: '#/components/schemas/test_type'
        raw_data:
          type: object
          description: The entire specification of the DSL that was used to create the test.
          example: {
                               "name": "Pet store",
                               "description": "DSL",
                               "type": "dsl",
                               "before": {
                                   "steps": [
                                       {
                                           "action": "petstore.create-pet",
                                           "properties": {
                                               "name": [
                                                   "kushkush",
                                                   "daisy"
                                               ]
                                           }
                                       }
                                   ]
                               },
                               "scenarios": [
                                   {
                                       "scenario_name": "Only get pet",
                                       "steps": [
                                           {
                                               "action": "petstore.get-pet"
                                           }
                                       ]
                                   }
                               ]
                           }
        artillery_test:
          type: object
          description: |
            The request JSON created from the DSL specification (as returned in the `raw_data` array).
            The artillery json that represents the test created from the raw
            data.
          example:  {
                               "config": {
                                   "target": "",
                                   "http": {
                                       "pool": 100
                                   },
                                   "phases": [
                                       {
                                           "duration": 0,
                                           "arrivalRate": 0,
                                           "rampTo": 0
                                       }
                                   ],
                                   "variables": {
                                       "before_0_petstore.create-pet_name": [
                                           "kushkush",
                                           "daisy"
                                       ]
                                   }
                               },
                               "scenarios": [
                                   {
                                       "name": "Only get pet",
                                       "flow": [
                                           {
                                               "get": {
                                                   "url": "http://127.0.0.1:3000/pets/{{petId}}"
                                               }
                                           }
                                       ],
                                       "weight": 100
                                   }
                               ],
                               "before": {
                                   "flow": [
                                       {
                                           "post": {
                                               "url": "http://127.0.0.1:3000/pets",
                                               "json": {
                                                   "name": "{{ before_0_petstore.create-pet_name }}",
                                                   "species": "dog"
                                               },
                                               "capture": [
                                                   {
                                                       "json": "$.id",
                                                       "as": "petId"
                                                   }
                                               ],
                                               "headers": {
                                                   "Content-Type": "application/json"
                                               }
                                           }
                                       }
                                   ]
                               }
                           }
    error_response:
      required:
        - message
      properties:
        message:
          type: string
    scenario:
      required:
        - scenario_name
        - steps
      properties:
        scenario_name:
          type: string
          description: The name of the scenario.
          example: Get Inventory
        steps:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - action
            properties:
              action:
                type: string
                description: |
                  A reference to the DSL definition you want to use. Uses the following syntax: `{dsl_group_name}.{dsl_name}`.
                example: petstore.create-pet
              properties:
                type: object
                description: |
                  Any additional properties in the body request that should be
                  changed.
              wait:
                type: integer
                description: The time to wait before starting the request. In seconds.
                example: 2
            description: An object that represent an action.
          description: An array of the scenario steps. Steps are the HTTP requests that make up the scenario.
        weight:
          type: number
          description: |
            Allows for the probability of a scenario being picked by a new virtual user to be "weighed" relative to other scenarios. If not specified, each scenario is equally likely to be picked.
    job:
      required:
        - test_id
        - arrival_rate
        - duration
      properties:
        variables:
          type: object
          description: >-
            Variables that the artillery uses and can be defined by the user.
            Supported variables: 1) appId - if specifed merchantId must be a
            variable too.
          example:
            appId: App-name
            merchantId: cd44fc7a-7719-4383-9981-427ff1210553
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        run_immediately:
          type: boolean
          description: >-
            Should the test be triggered immediately, regarding the cron
            expression
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_update:
      properties:
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_response:
      allOf:
        - $ref: '#/components/schemas/job'
        - properties:
            id:
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: Uuid that identifies the job
    create_job_response:
      allOf:
        - $ref: '#/components/schemas/job_response'
        - properties:
            run_id:
              type: string
              description: 'If the job is ran immediately, will show the run id.'
    post_report:
      required:
        - report_id
        - job_id
        - revision_id
        - test_type
        - test_name
        - test_description
        - start_time
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_name:
          type: string
          description: The test name
        test_description:
          type: string
          description: The test description
        start_time:
          type: string
          description: When the test started
        last_stats:
          type: object
          description: The current report metrics.
        notes:
          type: string
          description: notes about the test
    post_report_response:
      required:
        - report_id
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
    stats:
      required:
        - stats_time
        - phase_status
        - data
      properties:
        stats_time:
          type: string
          description: The time the stats were taken of the test
        phase_status:
          type: string
          description: The phase status of the test
        phase_index:
          type: string
          description: The phase number the test is running
        data:
          type: string
          description: The stats data
        error:
          type: object
          description: Error thrown while running test
    report_response:
      required:
        - test_id
        - revision_id
        - report_id
        - job_id
        - test_type
        - status
        - start_time
        - end_time
        - duration_seconds
        - avg_response_time_ms
        - arrival_rate
      properties:
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        report_id:
          type: string
          description: The id of the report/same as run_id
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_type:
          type: string
          description: 'The type of the test, can be paymentsos or custom'
        status:
          type: string
          description: The status of the running test
        start_time:
          type: string
          format: date
          description: When the test started
        end_time:
          type: string
          format: date
          description: when the tests finished
        duration_seconds:
          type: number
          description: The length of test in seconds
        avg_response_time_ms:
          type: number
          description: The average response time of the requests
        arrival_rate:
          type: number
          description: Arrival rate set for the test (how many requests send per second)
        last_stats:
          type: string
          description: How many of the requests ended in error (not 2xx)
        notes:
          type: string
          description: notes about the test
