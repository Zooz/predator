openapi: 3.0.0
info:
  version: 1.0.0
  title: Predator
  x-logo:
    url: logo.png
    backgroundColor: white
  description: |
    # Overview

    Predator is an open-source performance framework. It manages the entire
    lifecycle of load testing a server, from creating a test file, running
    scheduled and on-demand tests, and finally viewing the test results.
    Developers who want to load their system end-to-end or test a specific
    service will benefit from this framework. Bootstrapped with a user-friendly
    UI alongside a simple REST API, Predator simplifies the performance testing
    regime.

    For an introduction to Predator and its concepts, see the <a href="https://www.zooz.com" target="_blank">Predator Documentation</a>.

tags:
  - name: DSL Definitions
    description: |
      Predator's Domain Specific Language (DSL) allows you to generate request templates, which you can then reuse in the same test and in other tests, reducing replication.
  - name: Tests
    description: |
      Tests include end-to-end scenarios that are executed at pre-configured intervals to provide in-depth performance metrics of your API.
  - name: Jobs
    description: |
      Predator executes tests through so-called **jobs**. Depending on your configuration, the job will either execute immediately or at scheduled intervals.
  - name: Reports
    description: |
      Reports give you insight into the performance of your API. Predator generates a report for each test that is executed.

x-tagGroups:
  - name: Reference
    tags:
      - DSL Definitions
      - Tests
      - Jobs
      - Reports

paths:
  # DSL Definitions
  '/v1/dsl/{dsl_name}/definitions':
    parameters:
      - $ref: '#/components/parameters/dsl_name'
    post:
      operationId: create-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Create a DSL Definition
      description: Create a new DSL definition to generate a request template.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definition'
        description: The definition to create
        required: true
    get:
      operationId: retrieve-all-dsl-definitions
      tags:
        - DSL Definitions
      summary: Retrieve all DSL Definitions
      description: Retrieve all DSL definitions for the specified DSL group name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/dsl/{dsl_name}/definitions/{definition_name}':
    parameters:
      - $ref: '#/components/parameters/dsl_name'
      - $ref: '#/components/parameters/definition_name'
    get:
      operationId: retrieve-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Retrieve a DSL Definition
      description: Retrieve a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Update a DSL Definition
      description: Update a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_definition'
        description: The DSL definition to update
        required: true
    delete:
      operationId: Delete-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Delete a DSL Definition
      description: Delete a specific DSL definition.
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Tests
  /v1/tests:
    post:
      operationId: create-a-test
      tags:
        - Tests
      summary: Create a Test
      description: Create a new test.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to add
        required: true
    get:
      operationId: retrieve-all-tests
      tags:
        - Tests
      summary: Retrieve all Tests
      description: Retrieve all available tests.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}':
    get:
      operationId: retrieve-a-test
      tags:
        - Tests
      summary: Retrieve a Test
      description: Retrieve a specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-test
      tags:
        - Tests
      summary: Update a Test
      description: Update a specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to update
        required: true
    delete:
      operationId: delete-a-test
      tags:
        - Tests
      summary: Delete a Test
      description: Delete a specific test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/revisions':
    get:
      tags:
        - Tests
      summary: Retrieve Test Revisions
      description: Retrieve the revisions of the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Jobs
  /v1/jobs:
    get:
      operationId: retrieve-all-jobs
      tags:
        - Jobs
      summary: Retrieve all Jobs
      description: Retrieve the details of all available jobs.
      parameters:
        - in: query
          name: one_time
          description: Should return the one time tests (no cron expression)
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    post:
      operationId: create-a-job
      tags:
        - Jobs
      summary: Create a Job
      description: Create a new job that will trigger a test run.
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_job_response'
        description: The job to add
        required: true
  '/v1/jobs/{job_id}':
    get:
      operationId: retrieve-a-job
      tags:
        - Jobs
      summary: Retrieve a Job
      description: Retrieve a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      tags:
        - jobs
      description: update specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job_update'
        description: The job to add
        required: true
    delete:
      operationId: delete-a-job
      tags:
        - Jobs
      summary: Delete a Job
      description: Delete a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/jobs/{job_id}/runs/{run_id}/stop':
    post:
      operationId: terminate-a-job
      tags:
        - Jobs
      summary: Terminate a Job
      description: Terminate the execution of a specific job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/jobs/{job_id}/runs/{run_id}/logs:
    get:
      tags:
        - jobs
      description: get logs of specific job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: run_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "404":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  # Reports
  '/v1/tests/{test_id}/reports':
    post:
      operationId: create-a-report
      tags:
        - Reports
      summary: Create a Report
      description: Create a new report for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post_report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_report'
        description: report data
        required: true
    get:
      operationId: retrieve-all-reports
      tags:
        - Reports
      summary: Retrieve all Reports
      description: Retrieve all reports for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/tests/last_reports:
    get:
      operationId: retrieve-recent-reports
      tags:
        - Reports
      summary: Retrieve Recent Reports
      description: Retrieve the most recent reports
      parameters:
        - in: query
          name: limit
          description: The number of most recent reports to retrieve.
          required: true
          minimum: 1
          maximum: 100
          type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}/stats':
    post:
      tags:
        - Reports
      summary: Insert a Stats Object
      description: Insert a new stats object for a specific report
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stats'
        description: stats data
        required: true
  '/v1/tests/{test_id}/reports/{report_id}':
    get:
      operationId: retrieve-a-report
      tags:
        - Reports
      summary: Retrieve a Report
      description: Retrieve a specific report for the specified test
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Config
  /v1/config/{config_key}:
    delete:
      tags:
        - config
      description: Delete specific configuration value. it will fallback to the original
        env varible
      parameters:
        - in: path
          name: config_key
          required: true
          description: They key to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  /v1/config:
    get:
      tags:
        - config
      description: Get list of the configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config_body"
        "500":
          description: Internal server error
    put:
      tags:
        - config
      description: Change configration values that will override environment variables.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/config_body"
        description: The config data to add
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config_body"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
components:
  parameters:
    dsl_name:
      name: dsl_name
      in: path
      required: true
      description: The group (category) in which the DSL definition will be created. Specify a group name of your choice. We recommend you place related DSL definitions in the same group.
      schema:
        type: string
      example: petstore
    definition_name:
      name: definition_name
      in: path
      required: true
      description: The name of the DSL definition.
      schema:
        type: string
      example: create-pet
  schemas:
    definition:
      type: object
      required:
        - name
        - request
      properties:
        name:
          description: The name of the DSL definition.
          type: string
          example: create-pet
        request:
          description: The request template that the DSL definition will generate.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
          example: {
            "name": "create-pet",
            "request": {
              "post": {
                "url": "http://127.0.0.1:3000/pets",
                "headers": {
                  "Content-Type": "application/json"
                },
                "json": {
                  "name": "mickey",
                  "species": "dog"
                },
                "capture": [
                {
                  "json": "$.id",
                  "as": "petId"
                }
                ]
              }
            }
          }
    update_definition:
      required:
        - request
      properties:
        request:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
    definitions_response:
      type: array
      items:
        $ref: '#/components/schemas/definition'
    test:
      type: object
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/basic'
        - $ref: '#/components/schemas/dsl'
      required:
        - name
        - description
        - type
      properties:
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: A description of the test.
        type:
          type: string
          enum:
            - dsl
            - basic
    dsl:
      description: A test that is made of scenarios base on domain specific language
      type: object
      required:
        - scenarios
      properties:
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/scenario'
    artillery_request_schema:
      description: |
        The request schema used in test scenarios. The property name must be one of the following HTTP methods: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`.

        **Beware**: Specifying an invalid property name will return an error.
      type: object
      properties:
        capture:
          description: |
            Allows you to extract (capture) data from the request response and store it in a variable for reuse in another request.
            Must include one or more objects with a `json` attribute specifying the data to extract (using JSONPath syntax), as well as an `as` attribute specifying the variable name in which to store the extracted data.
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        url:
          description: The endpoint against which the request will be executed.
          type: string
        headers:
          description: The headers to pass in the request.
          additionalProperties:
            type: string
        json:
          description: The JSON body to use in the request.
          type: object
    key_value_string_object:
      type: object
      additionalProperties:
        type: string
    basic:
      description: A test that is made of artillery json
      required:
        - artillery_test
      properties:
        artillery_test:
          type: object
    test_id:
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The id of the test.
    create_test_response:
      allOf:
        - $ref: '#/components/schemas/test_id'
      required:
        - revision_id
      properties:
        revision_id:
          type: string
          format: uuid
          description: |
            The test's revision ID.

            When a test is created, it is assigned a revision ID. If you update a test, then it's revision ID changes as well. This allows Predator to always relate an existing report to the test it was originally based on.
    tests_response:
      allOf:
        - $ref: '#/components/schemas/create_test_response'
      #        - $ref: '#/components/schemas/test_id'
      required:
        - name
        - description
        - type
        - raw_data
        - artillery_test
        - updated_at
      properties:
        updated_at:
          type: string
          format: date_time
          description: The time the test was created/updated
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: The description of the test
        type:
          type: string
          enum:
            - dsl
            - basic
          description: >-
            the type of the test, basic - an artillery json created by the
            client, dsl - a test with saved request definitions api.
        raw_data:
          type: array
          items:
            $ref: '#/components/schemas/scenario'
        artillery_test:
          type: object
          description: >-
            The artillery json that represents the test created from the raw
            data.
    error_response:
      required:
        - message
      properties:
        message:
          type: string
    scenario:
      required:
        - scenario_name
        - steps
      properties:
        scenario_name:
          type: string
          description: The name of the scenario
        steps:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - action
            properties:
              action:
                type: string
              properties:
                type: object
                description: >-
                  Any additional properties in the body request that should be
                  changed.
              wait:
                type: integer
                description: To wait 'x' seconds before starting the request.
            description: An object that represent an action.
          description: An array of the steps in the scenario
        weight:
          type: number
          description: >-
            The weight (in percentage) of the scenario in the test. If not
            specified, will be calculated.
    job:
      required:
        - test_id
        - arrival_rate
        - duration
      properties:
        variables:
          type: object
          description: >-
            Variables that the artillery uses and can be defined by the user.
            Supported variables: 1) appId - if specifed merchantId must be a
            variable too.
          example:
            appId: App-name
            merchantId: cd44fc7a-7719-4383-9981-427ff1210553
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        run_immediately:
          type: boolean
          description: >-
            Should the test be triggered immediately, regarding the cron
            expression
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_update:
      properties:
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test we would like to schedule.
        cron_expression:
          type: string
          description: >-
            A cron expression describes when the test should be triggered,
            mandatory if run_immediately is not true
        webhooks:
          type: array
          items:
            type: string
            description: The url of where to send the webhook with the report information
        arrival_rate:
          type: number
          minimum: 1
          description: How many requests per second to create
        duration:
          type: number
          minimum: 1
          description: For how many seconds the test should run
        ramp_to:
          type: number
          minimum: 1
          description: >-
            A linear ramp up where the number of new arrivals increases linearly
            over the duration of the phase.
        max_virtual_users:
          type: number
          minimum: 1
          description: >-
            The number of concurrent users that can execute requests. The
            arrival rate will split between them
        parallelism:
          type: number
          minimum: 1
          description: >-
            The number of runners to deploy upon start of the test. The arrival
            rate, ramp to and the max virtual users will be split by this value
        emails:
          type: array
          items:
            type: string
            description: The url of where to send the the email with the report information
        environment:
          type: string
          description: In which environment the test will run
    job_response:
      allOf:
        - $ref: '#/components/schemas/job'
        - properties:
            id:
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: Uuid that identifies the job
    create_job_response:
      allOf:
        - $ref: '#/components/schemas/job_response'
        - properties:
            run_id:
              type: string
              description: 'If the job is ran immediately, will show the run id.'
    post_report:
      required:
        - report_id
        - job_id
        - revision_id
        - test_type
        - test_name
        - test_description
        - start_time
        - runner_id
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_name:
          type: string
          description: The test name
        test_description:
          type: string
          description: The test description
        start_time:
          type: string
          description: When the test started
        notes:
          type: string
          description: notes about the test
        runner_id:
          type: string
          description: the id of the runner that created the report
    post_report_response:
      required:
        - report_id
      properties:
        report_id:
          type: string
          description: The id of the report/same as run_id
    stats:
      required:
        - stats_time
        - phase_status
        - data
      properties:
        stats_time:
          type: string
          description: The time the stats were taken of the test
        phase_status:
          type: string
          description: The phase status of the test
        phase_index:
          type: string
          description: The phase number the test is running
        data:
          type: string
          description: The stats data
        error:
          type: object
          description: Error thrown while running test
    report_response:
      required:
        - test_id
        - revision_id
        - report_id
        - job_id
        - test_type
        - status
        - start_time
        - end_time
        - duration_seconds
        - avg_response_time_ms
        - arrival_rate
      properties:
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        report_id:
          type: string
          description: The id of the report/same as run_id
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_type:
          type: string
          description: 'The type of the test, can be paymentsos or custom'
        status:
          type: string
          description: The status of the running test
        start_time:
          type: string
          format: date
          description: When the test started
        end_time:
          type: string
          format: date
          description: when the tests finished
        duration_seconds:
          type: number
          description: The length of test in seconds
        avg_response_time_ms:
          type: number
          description: The average response time of the requests
        arrival_rate:
          type: number
          description: Arrival rate set for the test (how many requests send per second)
        last_updated_at:
          type: string
          format: date
          description: Last update of the test by one of the runners
        notes:
          type: string
          description: notes about the test
    config_body:
      additionalProperties: false
      properties:
        grafana_url:
          type: string
          description: The url for grafana.
        internal_address:
          type: string
          description: The local ip address of your machine.
        docker_name:
          type: string
          description: The predator-runner docker image that will run the test.
        job_platform:
          type: string
          description: Type of platform using to run predator (METRONOME,KUBERNETES,DOCKER)
        runner_cpu:
          type: number
          description: Number of CPU use by the each runner.
        runner_memory:
          type: number
          description: Max memory to use by each runner.
        metrics_plugin_name:
          type: string
          enum:
            - influx
            - prometheus
          description: Metrics to use, in case one or both metrics are configured.
        default_email_address:
          type: string
          description: Default email to send final report to, address can be configured
            only by using API.
        minimum_wait_for_delayed_report_status_update_in_ms:
          type: number
          description: The minimum of time waiting for runner to report before the test considered as finished.
            configured only by using API.
        default_webhook_url:
          type: string
          description: Default webhook url to send live report statistics to, can be
            configured only by using API.
        influx_metrics:
          additionalProperties: false
          type: object
          description: Influx configuration  .
          required:
            - host
            - username
            - password
            - database
          properties:
            host:
              type: string
              description: Influx host.
            username:
              type: string
              description: User name to influx.
            password:
              type: string
              description: Password name to influx.
            database:
              type: string
              description: Influx db name.
        prometheus_metrics:
          additionalProperties: false
          type: object
          description: prometheus configuration.
          required:
            - push_gateway_url
          properties:
            push_gateway_url:
              type: string
              description: Url of push gateway.
            buckets_sizes:
              type: string
              description: Bucket sizes use to configure prometheus.
        smtp_server:
          additionalProperties: false
          type: object
          description: Simple mail transfer protocol.
          required:
            - sender
            - host
            - port
            - username
            - password
            - timeout
          properties:
            sender:
              type: string
              format: email
            host:
              type: string
            port:
              type: number
            username:
              type: string
            password:
              type: string
            timeout:
              description: time in milliseconds
              type: number
