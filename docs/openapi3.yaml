openapi: 3.0.0
info:
  version: 1.4.0
  title: Predator
  x-logo:
    url: favicon.png
    backgroundColor: white
  description: |
    # Overview

    Predator is an open-source performance framework. It manages the entire
    lifecycle of load testing a server, from creating a test file, running
    scheduled and on-demand tests, and finally viewing the test results.
    Developers who want to load their system end-to-end or test a specific
    service will benefit from this framework. Bootstrapped with a user-friendly
    UI alongside a simple REST API, Predator simplifies the performance testing
    regime.

    For an introduction to Predator and its concepts, see the <a href="https://www.zooz.com" target="_blank">Predator Documentation</a>.

tags:
  - name: DSL Definitions
    description: |
      Predator's Domain Specific Language (DSL) allows you to generate request templates, which you can then reuse in the same test and in other tests, reducing replication.
  - name: Tests
    description: |
      Tests include end-to-end scenarios that are executed at pre-configured intervals to provide in-depth performance metrics of your API.
  - name: Processors
    description: |
      Processor files allow Predator to execute custom javascript code during test flows.
  - name: Jobs
    description: |
      Predator executes tests through so-called **jobs**. Depending on your configuration, the job will either execute immediately or at scheduled intervals.
  - name: Reports
    description: |
      Reports give you insight into the performance of your API. Predator generates a report for each test that is executed.
  - name: Configuration
    description: |
      This resource allows you to configure Predator programmatically.
  - name: Files
    description: |
      This resource allows uploading files which can be used by Predator tests like csv.
  - name: Benchmarks
    description: |
      By creating a benchmark for a specific test, each subsequent test run for that test will be given a score from 0-100 summarizing the test run in one simple to analyze numerical value.
  - name: Webhooks
    description: |
      This resource allows you to configure webhooks.
x-tagGroups:
  - name: Reference
    tags:
      - DSL Definitions
      - Tests
      - Processors
      - Jobs
      - Reports
      - Configuration
      - Files
      - Benchmarks
      - Webhooks

paths:
  #DSL Definitions
  '/v1/dsl/{dsl_name}/definitions':
    parameters:
      - $ref: '#/components/parameters/dsl_name'
    post:
      operationId: create-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Create a DSL Definition
      description: Create a new DSL definition to generate a request template.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definition'
        description: The definition to create
        required: true
    get:
      operationId: retrieve-all-dsl-definitions
      tags:
        - DSL Definitions
      summary: Retrieve all DSL Definitions
      description: Retrieve all DSL definitions for the specified DSL group name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/dsl/{dsl_name}/definitions/{definition_name}':
    parameters:
      - $ref: '#/components/parameters/dsl_name'
      - $ref: '#/components/parameters/definition_name'
    get:
      operationId: retrieve-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Retrieve a DSL Definition
      description: Retrieve a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Update a DSL Definition
      description: Update a specific DSL definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definition'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_definition'
        description: The DSL definition to update
        required: true
    delete:
      operationId: Delete-a-dsl-definition
      tags:
        - DSL Definitions
      summary: Delete a DSL Definition
      description: Delete a specific DSL definition.
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Tests
  /v1/tests:
    post:
      operationId: create-a-test
      tags:
        - Tests
      summary: Create a Test
      description: Create a new test.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to add
        required: true
    get:
      operationId: retrieve-all-tests
      tags:
        - Tests
      summary: Retrieve all Tests
      description: Retrieve all available tests.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}':
    get:
      operationId: retrieve-a-test
      tags:
        - Tests
      summary: Retrieve a Test
      description: Retrieve a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-test
      tags:
        - Tests
      summary: Update a Test
      description: Update a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_test_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test'
        description: The test to update
        required: true
    delete:
      operationId: delete-a-test
      tags:
        - Tests
      summary: Delete a Test
      description: Delete a specific test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/revisions':
    get:
      operationId: retrieve-all-test-revisions
      tags:
        - Tests
      summary: Retrieve Test Revisions
      description: Retrieve the revisions of the specified test.
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tests_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'

  # Jobs
  /v1/jobs:
    post:
      operationId: create-a-job
      tags:
        - Jobs
      summary: Create a Job
      description: Create a new job that will trigger a test run.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job'
        description: The job to add
        required: true
    get:
      operationId: retrieve-all-jobs
      tags:
        - Jobs
      summary: Retrieve all Jobs
      description: Retrieve the details of all available jobs.
      parameters:
        - in: query
          name: one_time
          description: Should return the one time tests (no cron expression)
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/jobs/{job_id}':
    get:
      operationId: retrieve-a-job
      tags:
        - Jobs
      summary: Retrieve a Job
      description: Retrieve a specific job.
      parameters:
        - in: path
          name: job_id
          description: The id of the job to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-job
      tags:
        - Jobs
      summary: Update a Job
      description: Update a specific job.
      parameters:
        - in: path
          name: job_id
          description: The id of the job to update.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job_update'
        description: The job to add
        required: true
    delete:
      operationId: delete-a-job
      tags:
        - Jobs
      summary: Delete a Job
      description: Delete a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/jobs/{job_id}/runs/{report_id}/stop':
    post:
      operationId: terminate-a-job
      tags:
        - Jobs
      summary: Terminate a Job
      description: Terminate the execution of a running job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'

  /v1/jobs/{job_id}/runs/{report_id}/logs:
    get:
      tags:
        - Jobs
      description: Get logs of specific job.
      parameters:
        - in: path
          description: The ID of the job.
          name: job_id
          required: true
          schema:
            type: string
        - in: path
          description: The id of a specific run in metronome which is also the report id.
          name: report_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "404":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"

  '/v1/jobs/containers/':
    delete:
      operationId: delete-all-job-containers
      summary: Delete all finished containers/pods
      tags:
        - Jobs
      description: delete all containers/pods of predator-runner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_containers_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Reports
  '/v1/tests/{test_id}/reports':
    get:
      operationId: retrieve-all-reports
      tags:
        - Reports
      summary: Retrieve all Reports
      description: Retrieve all reports for the specified test.
      parameters:
        - in: path
          name: test_id
          description: The id of the test for which to retrieve the reports.
          required: true
          schema:
            type: string
        - in: query
          name: filter
          description: is filter and by what property
          required: false
          schema:
            type: string
            enum:
              - is_favorite
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}/subscribe':
      post:
        operationId: subscribe-runner-to-report
        tags:
          - Reports
        summary: Subscribe runner to a report
        description: Subscribe a runner to a specific report.
        parameters:
          - in: header
            name: x-runner-id
            description: id of the predator-runner
            required: true
            schema:
              type: string
              format: uuid
              example: afbb6b43-fe52-48f2-84f4-1eebdbb2d5de
          - in: path
            name: test_id
            required: true
            description: The id of the test for which to retrieve the report.
            schema:
              type: string
              example: 81a27853-0db5-4e57-ad63-4b637528398a
          - in: path
            name: report_id
            description: The id of the report to retrieve.
            required: true
            schema:
              type: string
              example: '1601759162814'
        responses:
          '204':
            description: Success

          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error_response'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error_response'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}':
    get:
      operationId: retrieve-a-report
      tags:
        - Reports
      summary: Retrieve a Report
      description: Retrieve a specific report for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          description: The id of the test for which to retrieve the report.
          schema:
            type: string
            example: 81a27853-0db5-4e57-ad63-4b637528398a
        - in: path
          name: report_id
          description: The id of the report to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: edit-a-report
      tags:
        - Reports
      summary: edit a Report
      description: edit a specific report for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          description: The id of the test for which to retrieve the report.
          schema:
            type: string
            example: 81a27853-0db5-4e57-ad63-4b637528398a
        - in: path
          name: report_id
          description: The id of the report to retrieve.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/edit_report'
        description: report data
        required: true
    delete:
      operationId: delete-a-report
      tags:
        - Reports
      summary: delete a Report
      description: delete a specific report for the specified test.
      parameters:
        - in: path
          name: test_id
          required: true
          description: The id of the test for which to delete the report.
          schema:
            type: string
            format: uuid
            example: 81a27853-0db5-4e57-ad63-4b637528398a
        - in: path
          name: report_id
          description: The id of the report to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  /v1/tests/last_reports:
    get:
      operationId: retrieve-recent-reports
      tags:
        - Reports
      summary: Retrieve Recent Reports
      description: Retrieve the most recent reports.
      parameters:
        - in: query
          name: limit
          description: The number of most recent reports to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - in: query
          name: filter
          description: is filter and by what property
          required: false
          schema:
            type: string
            enum:
              - is_favorite
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/report_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/tests/{test_id}/reports/{report_id}/stats':
    post:
      tags:
        - Reports
      summary: Insert a Stats Object
      description: Insert a new stats object for a specific report
      parameters:
        - in: path
          name: test_id
          required: true
          schema:
            type: string
        - in: path
          name: report_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stats'
        description: stats data
        required: true
  /v1/tests/{test_id}/benchmark:
    post:
      tags:
        - Benchmarks
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      summary: Create benchmark for test
      description: Create benchmark for test
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark_request'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/benchmark_request'
        description: The benchmark to add
        required: true
    get:
      tags:
        - Benchmarks
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      summary: Get a benchmark for test
      description:  Get a benchmark for a test
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark_request'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Report Export
  '/v1/{test_id}/reports/{report_id}/export/{file_format}':
    get:
      operationId: export-report
      tags:
        - Reports
      parameters:
        - in: path
          name: test_id
          description: The test id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
        - in: path
          name: report_id
          description: The id of the report to retrieve.
          required: true
          schema:
            type: string
        - in: path
          name: file_format
          description: The file format for export.
          required: true
          schema:
            type: string
            enum: [csv]
      summary: Exports a report to a file in the required format
      description: Exports a report to a file in the required format.
      responses:
        "200":
          description: Success
        "400":
          description: Unsupported File Format
  # Export Comparison Report
  '/v1/tests/reports/compare/export/{file_format}':
    get:
      operationId: export-comparison-report
      tags:
        - Reports
      parameters:
        - in: path
          name: file_format
          description: The file format for export.
          required: true
          schema:
            type: string
            enum: [csv]
        - in: query
          name: report_ids
          description: List of report IDs that are part of comparison
          schema:
            type: array
          style: form
          explode: false
        - in: query
          name: test_ids
          description: List of test IDs that are part of comparison
          schema:
            type: array
          style: form
          explode: false
      summary: Exports a comparison report.
      description: Exports a comparison report from multiple tests.
      responses:
        "200":
          description: Success
        "400":
          description: Unsupported File Format
  # Config
  /v1/config:
    get:
      operationId: retrieve-configurations
      tags:
        - Configuration
      summary: Retrieve Configuration Settings
      description: Retrieve all Predator configuration settings.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config_body"
        "500":
          description: Internal server error
    put:
      operationId: update-configurations
      tags:
        - Configuration
      summary: Update Configuration Settings
      description: Update existing configuration settings. This will override environment variables.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/config_body"
        description: The config data to add
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config_body"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  /v1/config/{config_key}:
    delete:
      operationId: delete-a-configuration
      tags:
        - Configuration
      summary: Delete a Specific Configuration Value
      description: |
        Delete a specific configuration value. This will restore the original
        environment variable.
      parameters:
        - in: path
          name: config_key
          required: true
          description: They key to delete.
          schema:
            type: string
      responses:
        "204":
          description: Success
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"

  # Processors
  /v1/processors:
    post:
      operationId: create-processor-file
      tags:
        - Processors
      summary: Create processor file
      description: Create a new processor file which will have javascript code that can be executed by tests.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/processor'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/processor'
        description: The processor file to create
        required: true
    get:
      operationId: retrieve-all-processor-files
      tags:
        - Processors
      summary: Retrieve all processors files
      description: Retrieve the details of all processor files.
      parameters:
        - in: query
          name: from
          description: From which result to start retrieve data
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: limit
          description: Max results to return from this query ( Limit to 100 )
          required: false
          schema:
            type: integer
            maximum: 200
            default: 100
        - in: query
          name: exclude
          description: fields to exclude from response
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - javascript
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/processor'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  '/v1/processors/{processor_id}':
    get:
      operationId: retrieve-processor-file
      tags:
        - Processors
      summary: Retrieve processor file
      description: Retrieve a specific job.
      parameters:
        - in: path
          name: processor_id
          description: The id of the processor file to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/processor'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-processor-file
      tags:
        - Processors
      summary: Update a processor file
      description: Update a specific processor file.
      parameters:
        - in: path
          name: processor_id
          description: The id of the processor file to update.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/processor'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/processor'
        description: The processor to update
        required: true
    delete:
      operationId: delete-processor-file
      tags:
        - Processors
      summary: Delete processor file
      description: Delete a specific processor file.
      parameters:
        - in: path
          name: processor_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
  # Webhooks
  /v1/webhooks:
    get:
      operationId: retrieve-webhooks
      tags:
        - Webhooks
      summary: Retrieve webhooks
      description: Retrieve all webhooks.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    post:
      operationId: create-a-webhook
      tags:
        - Webhooks
      summary: Create a Webhook
      description: Create a new Webhook.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: The webhook to add
        required: true
  /v1/webhooks/{webhook_id}:
    get:
      operationId: retrieve-a-webhook
      tags:
        - Webhooks
      summary: Retrieve a webhook by id
      description: Retrieve a webhook by id.
      parameters:
        - in: path
          name: webhook_id
          description: The webhook id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
    put:
      operationId: update-a-webhook
      tags:
        - Webhooks
      summary: Update a webhook
      description: Update a webhook.
      parameters:
        - in: path
          name: webhook_id
          description: The webhook id.
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
    delete:
      operationId: delete-webhook
      tags:
        - Webhooks
      summary: Delete webhook file
      description: Delete a specific webhook by id.
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            type: string
            format: uuid
            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
      responses:
        '204':
          description: Success
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'

  # Files
  /v1/files:
    post:
      operationId: upload-file
      tags:
        - Files
      summary: Create file
      description: Upload a file which can be used by Predator tests like csv.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_file_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '413':
          description: Payload Too Large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                csv:
                  type: string
                  format: binary
        description: The file to create upload
        required: true
  '/v1/files/{file_id}':
    get:
      operationId: retrieve-file
      tags:
        - Files
      summary: Download file
      description: Retrieve a specific file.
      parameters:
        - in: path
          name: file_id
          description: The id of file to download
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_file_response'
  '/v1/files/{file_id}/metadata':
    get:
      operationId: retrieve-file-medtadata
      tags:
        - Files
      summary: Get filename by id
      description: Retrieve a specific file metadata.
      parameters:
        - in: path
          name: file_id
          description: The id of file to download
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_file_response'
components:
  parameters:
    dsl_name:
      name: dsl_name
      in: path
      required: true
      description: The group (category) in which the DSL definition will be created. Specify a group name of your choice. We recommend you place related DSL definitions in the same group.
      schema:
        type: string
      example: petstore
    definition_name:
      name: definition_name
      in: path
      required: true
      description: The name of the DSL definition.
      schema:
        type: string
      example: create-pet
  schemas:
    definition:
      type: object
      required:
        - name
        - request
      properties:
        name:
          description: The name of the DSL definition.
          type: string
          example: create-pet
        request:
          description: The request template that the DSL definition will generate.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
          example: {
            "post": {
              "url": "http://127.0.0.1:3000/pets",
              "headers": {
                "Content-Type": "application/json"
              },
              "json": {
                "name": "mickey",
                "species": "dog"
              },
              "capture": [{
                            "json": "$.id",
                            "as": "petId"
                          }]
            }

          }
    update_definition:
      required:
        - request
      properties:
        request:
          type: object
          description: The request template that the DSL definition will generate.
          additionalProperties:
            $ref: '#/components/schemas/artillery_request_schema'
    definitions_response:
      type: array
      items:
        $ref: '#/components/schemas/definition'
    test:
      type: object
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/basic'
        - $ref: '#/components/schemas/dsl'
      required:
        - name
        - description
        - type
      properties:
        name:
          type: string
          minLength: 1
          description: The name of the test.
          example: Order from Pet Store
        processor_file_url:
          type: string
          format: uri
          example: http://www.example.com/file.txt
          description: Url to text file location , will be used by the processor
        csv_file_id:
          type: string
          format: uuid
          example: 8e83bca3-f04f-4d16-a324-b0d2959db7d4
          description: The id of the uploaded csv file resource
        description:
          type: string
          description: A description of the test.
          example: Performance test for placing orders from the pet store.
        processor_id:
          description: Unique processor identifier
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/test_type'
    test_type:
      type: string
      description: |
        The type of test. Can be one of the following:
        * `basic`: Tests of this type cannot reuse request templates (DSL definition). All request specifications must be directly included in the test itself.
          This test type is identical to the type of tests you can create through the Predator UI.
        * `dsl`: Tests of this type reuse request templates based on previously created DSL definitons.
        enum:
        - dsl
        - basic
        example: dsl

    benchmark_request:
      type: object
      additionalProperties: false
      required:
        - errors
        - codes
        - rps
        - latency
      properties:
        errors:
          type: object
          example:
            ECONNREFUSED: 33
            CLIENTERROR: 10
        codes:
          type: object
          example:
            200: 161
            201: 1061
            500: 53
        rps:
          type: object
          required:
            - mean
            - count
          properties:
            mean:
              type: number
              description: average RPS per all test run.
            count:
              description: Total number of request, will be used to calculate errors ratio.
              type: number
        latency:
          type: object
          required:
            - median
            - p95
          properties:
            median:
              type: number
            p95:
              type: number

    dsl:
      description: A test that is made of scenarios base on domain specific language
      required:
        - scenarios
      properties:
        scenarios:
          description: A scenario is a sequence of HTTP requests aimed to test the performance of specific functionality.
          type: array
          items:
            $ref: '#/components/schemas/scenario'
    artillery_request_schema:
      description: |
        The request schema used in test scenarios. The property name must be one of the following HTTP methods: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`.

        **Beware**: Specifying an invalid property name will return an error.
      type: object
      properties:
        capture:
          description: |
            Allows you to extract (capture) data from the request response and store it in a variable for reuse in another request.
            Must include one or more objects with a `json` attribute specifying the data to extract (using JSONPath syntax), as well as an `as` attribute specifying the variable name in which to store the extracted data.
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        url:
          description: The endpoint against which the request will be executed.
          type: string
        headers:
          description: The headers to pass in the request.
          additionalProperties:
            type: string
        json:
          description: The JSON body to use in the request.
    key_value_string_object:
      type: object
      additionalProperties:
        type: string
    basic:
      description: A test that is made of artillery json
      required:
        - artillery_test
      properties:
        artillery_test:
          type: object
    test_id:
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The id of the test.
    create_test_response:
      allOf:
        - $ref: '#/components/schemas/test_id'
      required:
        - revision_id
      properties:
        revision_id:
          type: string
          format: uuid
          description: |
            The test's revision ID.

            When a test is created, it is assigned a revision ID. If you update a test, then it's revision ID changes as well. This allows Predator to always relate an existing report to the test it was originally based on.
    tests_response:
      type: object
      discriminator:
        propertyName: type
        mapping:
          dsl: '#/components/schemas/dsl_test_response'
          basic: '#/components/schemas/basic_test_response'
      required:
        - type
        - name
        - description
        - updated_at
      properties:
        type:
          $ref: '#/components/schemas/test_type'
        updated_at:
          type: string
          format: date-time
          description:   The date and time that the test was created.
        name:
          type: string
          description: The name of the test.
        description:
          type: string
          description: The description of the test.
        file_id:
          type: string
          description: File id.
        processor_id:
          description: Unique processor identifier
          type: string
          format: uuid
    dsl_test_response:
      type: object
      description: A test that is made of scenarios base on domain specific language
      allOf:
        - $ref: '#/components/schemas/create_test_response'
      properties:
        scenarios:
          description: A scenario is a sequence of HTTP requests aimed to test the performance of specific functionality.
          type: array
          items:
            $ref: '#/components/schemas/scenario'
          example:
            {
              "scenarios": [
              {
                "scenario_name": "Only get pet",
                "steps": [
                {
                  "action": "petstore.get-pet"
                }
                ]
              }
              ]
            }
        before:
          type: object
          example:
            {
              "before": {
                "steps": [
                {
                  "action": "petstore.create-pet",
                  "properties": {
                    "name": [
                      "kushkush",
                      "daisy"
                    ]
                  }
                }
                ]
              }
            }
        artillery_test:
          type: object
          description: |
            The request JSON created from the DSL specification (as returned in the `raw_data` array).
          example:  {
            "config": {
              "target": "",
              "http": {
                "pool": 100
              },
              "phases": [
              {
                "duration": 0,
                "arrivalRate": 0,
                "rampTo": 0
              }
              ],
              "variables": {
                "before_0_petstore.create-pet_name": [
                  "kushkush",
                  "daisy"
                ]
              }
            },
            "scenarios": [
            {
              "name": "Only get pet",
              "flow": [
              {
                "get": {
                  "url": "http://127.0.0.1:3000/pets/{{petId}}"
                }
              }
              ],
              "weight": 100
            }
            ],
            "before": {
              "flow": [
              {
                "post": {
                  "url": "http://127.0.0.1:3000/pets",
                  "json": {
                    "name": "{{ before_0_petstore.create-pet_name }}",
                    "species": "dog"
                  },
                  "capture": [
                  {
                    "json": "$.id",
                    "as": "petId"
                  }
                  ],
                  "headers": {
                    "Content-Type": "application/json"
                  }
                }
              }
              ]
            }
          }
    basic_test_response:
      type: object
      allOf:
        - $ref: '#/components/schemas/create_test_response'
        - type: object
          required:
            - artillery_test
      properties:
        artillery_test:
          type: object
          description: |
            The complete request JSON used in the test.
          example: {
            "config": {
              "target": "http://127.0.0.1:3000"
            },
            "scenarios": [
            {
              "name": "Get Pets",
              "weight": 100,
              "flow": [
              {
                "get": {
                  "url": "/pets",
                  "headers": {},
                  "capture": []
                }
              }
              ]
            }
            ]
          }
    error_response:
      required:
        - message
      properties:
        message:
          type: string
    scenario:
      required:
        - scenario_name
        - steps
      properties:
        scenario_name:
          type: string
          description: The name of the scenario.
          example: Get Inventory
        steps:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - action
            properties:
              action:
                type: string
                description: |
                  A reference to the DSL definition you want to use. Uses the following syntax: `{dsl_group_name}.{dsl_name}`.
                example: petstore.create-pet
              properties:
                type: object
                description: |
                  Allows you to replace a request's body's property value when the test is executed. `properties` must be an object of key-value pairs.
                  Each key you specify must correspond to the name you specified in the `json` object of the [Create a DSL Defintion](/#operation/create-a-dsl-definition) request.
                  The value must be an `array` of the values that should be used during test execution (when specifying multiple values, the value to be used will be selected randomly).,
                example: {
                  "name":
                    [
                      "kushkush",
                      "daisy"
                    ]
                }
              wait:
                type: integer
                description: The time to wait before starting the request. In seconds.
                example: 2
            description: An object that represent an action.
          description: An array of the scenario steps. Steps are the HTTP requests that make up the scenario.
        weight:
          type: number
          description: |
            Allows for the probability (in %) of a scenario being picked by a new virtual user to be "weighed" relative to other scenarios. If not specified, each scenario is equally likely to be picked.
          example: 20
    job:
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/load_test'
        - $ref: '#/components/schemas/functional_test'
      required:
        - type
        - test_id
        - duration
      properties:
        run_immediately:
          type: boolean
          description: Determines if the test will be executed immediately when the job is created.
          example: true
        type:
          type: string
          enum:
            - load_test
            - functional_test
          description: The type of the job to run.
          example: load_test
    job_update:
      properties:
        test_id:
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: The id of the test to schedule.
          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1
        cron_expression:
          type: string
          description: A cron expression for scheduling the test to run periodically at a specified date/time.
          example: 0 0 12 * * ?
        webhooks:
          type: array
          uniqueItems: true
          description: |
            An array of webhooks ids, events will be fired to the coresponding webhooks according to their events configuration.
            The event body will include detailed information about the test, such as the number of scenarios that were executed
            and the number of requests that were invoked.
          items:
            type: string
            format: uuid
            description: The id of the webhook
        duration:
          type: number
          minimum: 1
          description: The time during which the test will run. In seconds.
          example: 20
        max_virtual_users:
          type: number
          minimum: 1
          description: |
            The maximum number of virtual users executing the scenario requests. This places a threshold on the number of requests that can exist simultaneously.
          example: 5
        parallelism:
          type: number
          minimum: 1
          description: |
            The number of runners that will be allocated to executing the test. The `arrival_rate`, `duration` and `max_virtual_users` will be split between the specified number of runners.
          example: 5
        emails:
          type: array
          description: An email address to which Predator will send a message when the test execution is completed.
          items:
            type: string
            example: nhoj@atlovart.com
        environment:
          type: string
          description: Free text describing the environment against which the test is executed.
          example: test
        proxy_url:
          type: string
          description: URL of the proxy server that predator runners will use
          example: test
        debug:
          type: string
          description: set to * in order to print all requests and responeses of the runner
          example: test
        enabled:
          type: boolean
          description: Ability to enable/disable scheduled jobs.
          example: true
          default: true
    delete_containers_response:
      required:
        - deleted
      properties:
        deleted:
          type: number
          description: Number of deleted containers.
    job_response:
      allOf:
        - $ref: '#/components/schemas/job'
        - properties:
            id:
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                description: The job id.
    create_job_response:
      allOf:
        - $ref: '#/components/schemas/job_response'
        - properties:
            report_id:
              type: string
              description: The run id. Only shown if the job is ran immediately.
    processor:
      required:
        - name
        - description
        - javascript
      properties:
        id:
          description: Unique processor identifier
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          minLength: 1
          description: The name of the processor.
          example: Custom javascript for logging
        description:
          type: string
          description: A description of the processor.
          example: logs every error (5xx).
        exported_functions:
          type: array
          readOnly: true
          description: Names of all exported function in the javascript file
          items:
            type: string
          example: generateNameBeforeScenario
        updated_at:
          type: string
          format: date-time
          description: The date and time that the procesor file was updated.
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time that the procesor file was created.
          readOnly: true
        javascript:
          type: string
          description: Raw javascript that will be used by the processor resource.
          example: module.exports.generateNameBeforeScenario = (context, ee, next) => { context.name = Date.now() + '_mick' }
    edit_report:
      additionalProperties: false
      properties:
        notes:
          type: string
          description: notes for specific report
        is_favorite:
          type: boolean
          description: wether this report should be marked as favorite
    post_report:
      required:
        - report_id
        - job_id
        - revision_id
        - test_type
        - test_name
        - test_description
        - start_time
        - runner_id
      properties:
        report_id:
          type: string
          description: The id of the report
        test_id:
          type: string
          description: The id of the test we would like to schedule.
        revision_id:
          type: string
          description: The revision id of the test
        job_id:
          type: string
          description: The id of the job in the scheduler
        test_name:
          type: string
          description: The test name
        test_description:
          type: string
          description: The test description
        start_time:
          type: string
          description: When the test started
        last_stats:
          type: object
          description: The current report metrics.
        notes:
          type: string
          description: notes about the test
        runner_id:
          type: string
          description: the id of the runner that created the report
    post_report_response:
      required:
        - report_id
      properties:
        report_id:
          type: string
          description: The id of the report
    stats:
      required:
        - stats_time
        - phase_status
        - data
      properties:
        stats_time:
          type: string
          description: The time the stats were taken of the test
        phase_status:
          type: string
          description: The phase status of the test
        phase_index:
          type: string
          description: The phase number the test is running
        data:
          type: string
          description: The stats data
        error:
          type: object
          description: Error thrown while running test
    report_response:
      discriminator:
        propertyName: job_type
      oneOf:
        - $ref: '#/components/schemas/load_test'
        - $ref: '#/components/schemas/functional_test'
      required:
        - test_id
        - revision_id
        - report_id
        - job_id
        - job_type
        - test_type
        - status
        - start_time
        - end_time
        - duration_seconds
      properties:
        test_id:
          type: string
          description: The test id.
        revision_id:
          type: string
          description: The revision id of the test.
        report_id:
          type: string
          description: The report id.
        job_id:
          type: string
          description: The job id.
        test_type:
          $ref: '#/components/schemas/test_type'
        status:
          type: string
          description: The status of the running test.
        start_time:
          type: string
          format: date
          description: The date and time that the test started its execution.
        end_time:
          type: string
          format: date
          description: The date and time that the test execution ended.
        duration_seconds:
          type: number
          description: The duration of the test in seconds.
          example: 60
        score:
          type: number
          description: The score of a report, calculated based on a benchmark and benchmark weights
          example: 9.25
        benchmark_weights_data:
          type: object
          description: The way score calualated
        arrival_rate:
          type: number
          description: The arrival rate that was set for the test. This is the number of times per second that the test scenarios will run.
        last_stats:
          type: string
          description: The current report metrics.
        avg_rps:
          type: number
          description: The average rps.
        notes:
          type: string
          description: notes about the test
    config_body:
      additionalProperties: false
      properties:
        grafana_url:
          type: string
          description: The url for grafana.
        internal_address:
          type: string
          description: The local ip address of your machine.
        runner_docker_image:
          type: string
          description: The predator-runner docker image that will run the test.
        job_platform:
          type: string
          description: Type of platform using to run predator (METRONOME,KUBERNETES,DOCKER)
        runner_cpu:
          minimum: 0
          type: number
          description: Number of CPU use by the each runner.
        runner_memory:
          type: number
          minimum: 128
          description: Max memory to use by each runner.
        allow_insecure_tls:
          type: boolean
          description: If true, don't fail requests on unverified server certificate errors.
        interval_cleanup_finished_containers_ms:
          type: number
          minimum: 0
          description: Interval (in ms) to search and delete finished tests containers. Value of 0 means no auto clearing enabled.
        metrics_plugin_name:
          type: string
          enum:
            - influx
            - prometheus
          description: Metrics to use, in case one or both metrics are configured.
        default_email_address:
          type: string
          description: Default email to send final report to, address can be configured
            only by using API.
        minimum_wait_for_delayed_report_status_update_in_ms:
          minimum: 0
          type: number
          description: The minimum of time waiting for runner to report before the test considered as finished.
            configured only by using API.
        delay_runner_ms:
          type: number
          minimum: 0
          description: Delay before the runners will start the test,
            useful for enviroments like kubernetes with sidecars that should be
            initialized before the runner starts
        influx_metrics:
          additionalProperties: false
          type: object
          description: Influx configuration  .
          required:
            - host
            - username
            - password
            - database
          properties:
            host:
              type: string
              description: Influx host.
            username:
              type: string
              description: User name to influx.
            password:
              type: string
              description: Password name to influx.
            database:
              type: string
              description: Influx db name.
        prometheus_metrics:
          additionalProperties: false
          type: object
          description: prometheus configuration.
          required:
            - push_gateway_url
          properties:
            push_gateway_url:
              type: string
              description: Url of push gateway.
            buckets_sizes:
              type: string
              description: Bucket sizes use to configure prometheus.
            labels:
              description: Labels which will be passed to prometheus push gateway.
              type: object
              additionalProperties:
                type: string
        smtp_server:
          additionalProperties: false
          type: object
          description: Simple mail transfer protocol.
          required:
            - from
            - host
            - port
            - username
            - password
            - timeout
          properties:
            from:
              type: string
              format: email
              description: the 'from' email address that will be used to send emails
            host:
              type: string
            port:
              type: number
            username:
              type: string
            password:
              type: string
            timeout:
              description: timout to smtp server in milliseconds
              type: number
        benchmark_threshold:
          type: number
          description: Minimum acceptable score of tests, if a score is less than this value, a webhook will be sent to the threshold webhook url.
          minimum: 0
          maximum: 100
        benchmark_weights:
          additionalProperties: false
          type: object
          description: benchmark_weights
          required:
            - percentile_ninety_five
            - percentile_fifty
            - server_errors_ratio
            - client_errors_ratio
            - rps
          properties:
            percentile_ninety_five:
              description: Percentage of the score affected by p95 results.
              allOf:
                - $ref: '#/components/schemas/benchmark_weights'
            percentile_fifty:
              description: Percentage of the score affected by median results.
              allOf:
                - $ref: '#/components/schemas/benchmark_weights'
            server_errors_ratio:
              description: Percentage of the score affected by server errors ratio.
              allOf:
                - $ref: '#/components/schemas/benchmark_weights'
            client_errors_ratio:
              description: Percentage of the score affected by client errors ratio.
              allOf:
                - $ref: '#/components/schemas/benchmark_weights'
            rps:
              description: Percentage of the score affected by requests per second results.
              allOf:
                - $ref: '#/components/schemas/benchmark_weights'
        custom_runner_definition:
          description: custom json that will be merged with the kubernetes/metronome predator runner job definition
          type: object
    benchmark_weights:
      type: object
      required:
        - percentage
      properties:
        percentage:
          type: number
          description: benchmark percentage weight
    upload_file_response:
      type: object
      required:
        - id
        - filename
      properties:
        id:
          type: string
          pattern: uuid
          description: the id of the file
        filename:
          type: string
          description: the name of the file
    load_test:
      type: object
      allOf:
        - $ref: '#/components/schemas/job_update'
        - type: object
      required:
        - arrival_rate
      properties:
        arrival_rate:
          type: number
          minimum: 1
          description: The number of times to run the scenarios during the full duration of the test. A value of 20 arrival_count in a 60 second test will result in running a scenario once every 3 seconds.
        ramp_to:
          type: number
          minimum: 1
          description: |
            Used in combination with the `arrival_rate` and `duration` values. Increases the arrival rate linearly to the value specified, within the specified duration.
          example: 5
    functional_test:
      allOf:
        - $ref: '#/components/schemas/job_update'
        - type: object
      type: object
      required:
        - arrival_count
      properties:
        arrival_count:
          type: number
          minimum: 1
          description: The number of times per second that the test scenarios will run.
    webhook:
      type: object
      required:
        - name
        - url
        - events
        - format_type
      properties:
        id:
          description: Unique webhook identifier
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Webhook name
        url:
          type: string
          description: Webhook url to post events
        events:
          description: list of events which will trigger the webhook
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/webhooks_types'
        format_type:
          $ref: '#/components/schemas/webhook_format_types'
        global:
          type: boolean
          description: indicates whether the webhook should be applied globally(over all jobs)
    webhooks_types:
      type: string
      enum:
        - started
        - finished
        - in_progress
        - api_failure
        - failed
        - aborted
        - benchmark_passed
        - benchmark_failed
    webhook_format_types:
      type: string
      enum:
        - slack
        - json
        - teams
