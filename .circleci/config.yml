version: 2.1
jobs:
  setup:
    docker:
    - image: circleci/node:12.16
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - run: npm install
    - save_cache:
        key: dependency-cache-{{ checksum "package.json" }}
        paths:
        - node_modules
  npm-audit:
    docker:
    - image: circleci/node:12.16
      environment:
        TZ: "Asia/Jerusalem"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm audit --only=prod --audit-level=moderate || true
  unit-tests:
    docker:
    - image: circleci/node:12.16
      environment:
        TZ: "Asia/Jerusalem"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm run lint
      - run: npm run unit-tests
      - store_artifacts:
          path: ./coverage
  integration-tests:
    docker:
    - image: circleci/node:12.16
    - image: mailhog/mailhog
    - image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: predator
    - image: postgres:11-alpine
      environment:
        POSTGRES_USER: root
        POSTGRES_PASSWORD: password
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - run:
        name: Integration tests with docker engine and sqlite configuration
        command: npm run integration-tests || true
        environment:
          DATABASE_TYPE: sqlite
          JOB_PLATFORM: docker
    - run:
        name: Integration tests with kubernetes and mysql configuration
        command: npm run integration-tests
        environment:
          DATABASE_TYPE: mysql
          JOB_PLATFORM: kubernetes
    - run:
        name: Integration tests with kubernetes and sqlite configuration
        command: npm run integration-tests
        environment:
          DATABASE_TYPE: sqlite
          JOB_PLATFORM: kubernetes

    - run:
        name: Integration tests with metronome and postgres configuration
        command: npm run integration-tests
        environment:
          DATABASE_TYPE: postgres
          JOB_PLATFORM: metronome
    - run:
        name: Integration tests with aws fargate and sqlite configuration
        command: npm run integration-tests
        environment:
          DATABASE_TYPE: sqlite
          JOB_PLATFORM: awsFargate
  integration-tests-with-streaming:
    docker:
      - image: circleci/node:12.16
      - image: wurstmeister/zookeeper
        name: zookeeper
      - image: wurstmeister/kafka:2.13-2.7.0
        name: kafka
        environment:
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Integration tests with docker engine and sqlite configuration
          command: npm run integration-tests-with-streaming
          environment:
            DATABASE_TYPE: sqlite
            JOB_PLATFORM: kubernetes
            STREAMING_PLATFORM: kafka
  build:
    docker:
    - image: docker:18
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - run: .circleci/docker-build.sh
  release:
    parameters:
      version:
        type: string
    docker:
    - image: circleci/node:12.16
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - add_ssh_keys:
        fingerprints:
        - "17:11:78:7b:e4:ed:ca:1a:fc:a8:a2:0d:92:d4:32:e6"
    - run: .circleci/release-<< parameters.version >>.sh
    - run: .circleci/tag-latest-image.sh
  tag-latest-image:
    docker:
      - image: circleci/node:12.16
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - add_ssh_keys:
          fingerprints:
            - "17:11:78:7b:e4:ed:ca:1a:fc:a8:a2:0d:92:d4:32:e6"
      - run: .circleci/tag-latest-image.sh

workflows:
  test_build_release:
    jobs:
    - setup
    - npm-audit
    - unit-tests:
        requires:
        - setup
    - integration-tests:
        requires:
        - unit-tests
    - integration-tests-with-streaming:
        requires:
        - integration-tests
    - build:
        requires:
        - integration-tests-with-streaming
        filters:
          branches:
            # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
            ignore: /pull\/[0-9]+/
    - release-approval:
        name: release-<< matrix.version >>-approval
        type: approval
        requires:
        - build
        matrix:
          parameters:
            version: ["patch", "minor", "major"]
        filters:
          branches:
            only: master
    - release:
        name: release-<< matrix.version >>
        matrix:
          parameters:
            version: ["patch", "minor", "major"]
        requires:
          - release-<< matrix.version >>-approval
        filters:
          branches:
            only: master
